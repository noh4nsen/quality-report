name: 'Quality Report'
description: 'Generate a quality report based on Tflint, Tfsec and Checkov output'
inputs:
  head_branch:
    description: "Head branch for comparison. Only alphanumeric, dash and underscores are accepted."
    required: true
    default: dev
  base_branch:
    description: "Base branch for comparison. Only alphanumeric, dash and underscores are accepted."
    required: true
    default: main
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Go-diff
      id: go-diff
      uses: noh4nsen/go-diff@1.4.0
      with:
      head_branch: ${{ inputs.head_branch }}
      base_branch: ${{ inputs.base_branch }}

    - name: Checkout code
      uses: actions/checkout@v3

    - name: TFLint Report
      id: tflint-report
      uses: noh4nsen/tflint-report@0.5.0
      with:
        modified_projects: ${{ steps.go-diff.outputs.modified_projects }}

    - name: Tfsec Report
      id: tfsec-report
      uses: noh4nsen/tfsec-report@0.4.0
      with:
        modified_projects: ${{ steps.go-diff.outputs.modified_projects }}

    - name: Checkov Report
      id: checkov-report
      uses: noh4nsen/checkov-report@0.3.0
      with:
        modified_projects: ${{ steps.go-diff.outputs.modified_projects }}

    - name: Quality Report Aggregator
      id: quality-report-aggregator
      uses: noh4nsen/quality-report-aggregator@1.0.0
      with:
        tflint_report: ${{ steps.tflint-report.outputs.tflint_report }}
        tfsec_report: ${{ steps.tfsec-report.outputs.tfsec_report }}
        checkov_report: ${{ steps.checkov-report.outputs.checkov_report }}

    - name: print
      shell: bash
      run: |
        export report=${{ steps.quality-report-aggregator.outputs.report }}
        echo -e "$report"

    - name: Comment Report
      uses: actions/github-script@0.9.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `\`${{ steps.quality-report-aggregator.outputs.report }}\``;
          
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })